= Boost Angularâ€™s Performance by Lazy Loading your Modules with devon4ng
== Learn how to defer initialization of modules in Angular until it is needed
====
In single-page-applications as the application size increases its loading speed decreases (since typically the entire application is loaded at once). Lazy loading is a design pattern that defers initialization of objects until it is needed. Angular handles lazy loading through the routing module which redirects to requested pages. Those pages can be loaded at start or on demand. In this tutorial you will build a simple app to understand how lazyloading is implemented in Angular.

## Prerequisites
* Basic Angular knowledge

## Learning goals
In this tutorial you will learn how to:
* create an Angular application using the devon command
* look how all modules are loaded by an application at the begining (eager loading)
* implement lazy loading and understand its concept and advantages
====

[step]
--
restoreDevonfwIde(["npm", "ng", "vscode"])
--

To explain how lazy loading is implemented using angular, a basic sample app is going to be developed. This app will consist in a window named "level 1" that contains two buttons that redirects to other windows in a "second level". It is a simple example, but useful to understand the relation between angular modules and lazy loading.

![levels-app](./assets/levels-app.png)

This graphic shows that modules acts as gates to access components "inside" them.

Because the objective of this guide is related mainly with logic, the html structure and scss styles are less relevant.

Before creating a devon4ng application, you first have to install the devonfw ide. You will find more information about devonfw on https://devonfw.com/website/pages/welcome/welcome.html.
Once you have setup devonfw ide, you are ready to create your devon4ng application. (Please wait until the devon setup completes and the command prompt appears in the integrated terminal here).
[step]
== Introduction
--
createDevon4ngProject("level-app", "", ["--style=scss", "--routing=true", "--strict=false", "--skip-git=true"])
--

In the file app.component.html delete all the content and put in the `router-outlet` tag.
[step]
== Enable routing with router-outlet
--
changeFile("level-app/src/app/app.component.html", { "file": "files/app.component.html.txt" })
--

Next you will create the feature modules and components for the app. You will follow the structure shown in the image in the first step. You can use the CLI command `devon ng generate module` along with the `--routing` flag to generate the modules, and `devon ng generate component` command to generate the components.
[step]
== Create the modules and their components
--
createFile("level-app/src/app/first/first-routing.module.ts", "files/first-routing.module.ts.txt")
createFile("level-app/src/app/first/first.module.ts", "files/first.module.ts.txt")
createFile("level-app/src/app/first/second-left/second-left-routing.module.ts", "files/second-left-routing.module.ts.txt")
createFile("level-app/src/app/first/second-left/second-left.module.ts", "files/second-left.module.ts.txt")
createFile("level-app/src/app/first/second-right/second-right-routing.module.ts", "files/second-right-routing.module.ts.txt")
createFile("level-app/src/app/first/second-right/second-right.module.ts", "files/second-right.module.ts.txt")
createFile("level-app/src/app/first/first/first.component.html", "files/first.component.html.txt")
createFile("level-app/src/app/first/first/first.component.scss", "files/empty-file.txt")
createFile("level-app/src/app/first/first/first.component.ts", "files/first.component.ts.txt")
createFile("level-app/src/app/first/second-left/content/content.component.html", "files/content.component.html.txt")
createFile("level-app/src/app/first/second-left/content/content.component.scss", "files/empty-file.txt")
createFile("level-app/src/app/first/second-left/content/content.component.ts", "files/content.component.ts.txt")
createFile("level-app/src/app/first/second-right/content/content.component.html", "files/content-right.component.html.txt")
createFile("level-app/src/app/first/second-right/content/content.component.scss", "files/empty-file.txt")
createFile("level-app/src/app/first/second-right/content/content.component.ts", "files/content.component.ts.txt")
--

To move between the components you will now configure the routes. You can refer the image in the first step to understand how you will configure the routes.
In `app-routing.module.ts` you will add a path 'first' to `FirstComponent` and a redirection from '' to 'first'. And then import the `FirstModule` in the main `app.module.ts`

Next, for the feature modules, you will add the routes 'first/second-left' and 'first/second-right' pointing to their respective `ContentComponent` in `first-routing.module.ts`. And then import `SecondLeftModule` and `SecondRightModule` in `first.module.ts`
[step]
== Configure routing
--
changeFile("level-app/src/app/app-routing.module.ts", { "file": "files/app-routing.module.ts.txt" })
changeFile("level-app/src/app/app.module.ts", { "file": "files/app.module.ts.txt" })
changeFile("level-app/src/app/first/first-routing.module.ts", { "file": "files/first-routing.module.update1.ts.txt" })
changeFile("level-app/src/app/first/first.module.ts", { "file": "files/first.module.ts.update1.ts.txt" })
runClientNg("level-app", { "startupTime": 200, "port": 4200, "path": "" })
--

If you run the project at this point you can see in the terminal that just the main file is built.
![compile-eager](./assets/compile-eager.png)

Go to port 4200 and check the Network tab in the Developer Tools. We can see a document named "first" is loaded. If you click on [Go to right module] a second level module opens, but there is no 'second-right' document.
![second-lvl-right-eager](./assets/second-lvl-right-eager.png)

Now we will modify the app to lazily load the modules. Modifying an angular application to load its modules lazily is easy, you have to change the routing configuration of the desired module (for example `FirstModule`). Instead of loading a component, you dynamically import it in a `loadChildren` attribute because modules acts as gates to access components "inside" them. Updating this app to load lazily has four consecuences: no component attribute, no import of `FirstComponent`, `FirstModule` import has to be removed from the imports array at `app.module.ts`, and change of context.

Also, in `first-routing.module.ts` you can change the path for the `ContentComponent`s from `first/second-left` and `first/second-right` to simply `second-left` and `second-right` respectively,  because it aquires the context set by AppRoutingModule.
[step]
== Eager loading vs Lazy Loading
--
changeFile("level-app/src/app/app-routing.module.ts", { "file": "files/app-routing.module.update2.ts.txt" })
changeFile("level-app/src/app/app.module.ts", { "file": "files/app.module.ts.update2.txt" })
changeFile("level-app/src/app/first/first-routing.module.ts", { "file": "files/first-routing.module.update2.ts.txt" })
--

====
Now when you check the terminal running the app, you could see the lazy loaded modules getting generated along with the main bundle. Also, if you check the Network tab in the developer tools, you could see the (lazy) modules getting loaded when needed. Since, `FirstModule` is the first path we visit, it is getting loaded at first only.
![compile-first-lazy](./assets/compile-first-lazy.png)
![first-lvl-lazy](./assets/first-lvl-lazy.png)

Now, lets make the SecondLeftModule load lazily. For this, you need to change `component` to `loadChildren` and refer `SecondLeftModule` in the file `first-routing.module.ts`. Next, you need to remove `SecondLeftModule` from the `imports` array of `first.module.ts`. After that you need to route the `ContentComponent` within the `second-left-routing.module.ts`.
[step]
== Lazily load the second left module
--
changeFile("level-app/src/app/first/first-routing.module.ts", { "file": "files/first-routing.module.update3.ts.txt" })
changeFile("level-app/src/app/first/first.module.ts", { "file": "files/first.module.update3.ts.txt" })
changeFile("level-app/src/app/first/second-left/second-left-routing.module.ts", { "file": "files/second-left-routing.module.update3.ts.txt" })
--
If you now check the terminal, you could also see `second-left-second-left-module` along with the `first-first-module` and the `main` bundle getting generated. 
![second-lvl-lazy](./assets/second-lvl-lazy.png)

Also, in the Network tab of the developer tools, you could see the `second-left-second-left-module.js` is only loading when we click on the [Go to left module] button
![second-lvl-left-lazy](./assets/second-lvl-left-lazy.png)
====

====
Lazy loading is a pattern useful when new features are added, these features are usually identified as modules which can be loaded only if needed as shown in this tutorial, reducing the time spent loading an application.
====