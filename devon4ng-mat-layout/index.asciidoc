= Create an Angular application with Angular Material components using devon4ng
====
The purpose of this tutorial is to get a basic understanding of creating layouts using Angular Material in a devon4ng application. We will create an application with a header containing some menu links and a sidenav with some navigation links.

## Prerequisites
* devonfw-ide installed
* Basic Angular knowledge

## Learning goals
In this tutorial we will learn how to:
* create an Angular application using the devon command
* add Angular Material to the application
* import Angular Material components into our modules
* use Material icons in the application
* use a prebulit theme to style the application
* create layout (conataining a header with menu along with a sidenav with navigational links) with the Angular Material components
====

[step]
--
restoreDevonfwIde(["java","mvn", "npm", "ng"])
--

Before creating a devon4ng application, you first have to install the devonfw ide. You will find more information about devonfw on https://devonfw.com/website/pages/welcome/welcome.html.
Once you have setup devonfw ide, you are ready to create your first devon4ng project.
[step]
--
createDevon4ngProject("devon4ng-mat-layout", "", ["--style=scss", "--routing=true", "--strict=false"])
runClientNg("devon4ng-mat-layout", { "startupTime": 200, "port": 4200, "path": "" })
--

Next we will add Angular Material to our application.
[step]
--
npmInstall("devon4ng-mat-layout", {"name": "@angular/material @angular/cdk @angular/animations", "args": ["--save"]})
--

Once the dependencies are installed, we need to import the BrowserAnimationsModule in our AppModule for animations support.
Also, Angular Material provides a host of components for designing our application. All the components are well structured into NgModules. For each component from the Angular Material library that we want to use, we have to import the respective NgModule.
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.module.ts", { "file": "files/app.module.txt" })
--

To use Material Design Icons along with the mat-icon component, we will load the Material Icons library in our `src/index.html` file.
[step]
--
changeFile("devon4ng-mat-layout/src/index.html", { "file": "files/index.txt" })
--

Now that we have all the Angular Material related dependencies set up in our project, we can start coding. Let’s begin by adding a suitable `margin` and `font` to the body element of our single page application. We will add it in the `src/styles.scss` file to apply it globally.
[step]
--
changeFile("devon4ng-mat-layout/src/styles.scss", { "file": "files/styles.txt" })
--

====
We will clear the `app.component.html` file and setup a header with a menu button and some navigational links. We will use `mat-toolbar`, `mat-button`, `mat-menu`, `mat-icon` and `mat-icon-button` for this:
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.component.html", { "file": "files/app.component.txt" })
--
The color attribute on the mat-toolbar element will give it the primary (indigo) color as defined by our theme. The color attribute works with most Angular Material components; the possible values are `primary`, `accent` and `warn`. The `mat-toolbar` is a suitable component to represent a header. It serves as a placeholder for elements we want in our header. Inside the `mat-toolbar`, we start with a button having `mat-icon-button` attribute, which itself contains a `mat-icon` element having the value `menu`. This will serve as a menu button which we can use to toggle the `sidenav`. We follow it with some sample buttons having the `mat-button` attribute. Notice the first button has a property `matMenuTriggerFor` binded to a local reference submenu. As the property name suggests, the click of this button will display the mat-menu element with the specified local reference as a drop-down menu. The rest of the code is self explanatory.
====

We want to keep the sidenav toggling menu button on the left and move the rest to the right to make it look better. To do this lets add the following style to the `menu` class in `app.component.scss`:
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.component.scss", { "file": "files/app.component.scss.txt" })
--

Next, we will create a sidenav. But before that lets create a couple of components to navigate between, the links of which we will add to the sidenav. You can use the `ng generate component` (or `ng g c` command for short) to create Home and Data components. But here, we will create them manually. We nest them in the `pages` sub-directory since they represent our pages. And we will also add the new components to our AppModule.
[step]
--
createFile("devon4ng-mat-layout/src/app/pages/home/home.component.html", "files/home.component.txt")
createFile("devon4ng-mat-layout/src/app/pages/home/home.component.scss", "files/home.component.scss.txt")
createFile("devon4ng-mat-layout/src/app/pages/home/home.component.ts", "files/home.component.ts.txt")
createFile("devon4ng-mat-layout/src/app/pages/data/data.component.html", "files/data.component.txt")
createFile("devon4ng-mat-layout/src/app/pages/data/data.component.scss", "files/home.component.scss.txt")
createFile("devon4ng-mat-layout/src/app/pages/data/data.component.ts", "files/data.component.ts.txt")
changeFile("devon4ng-mat-layout/src/app/app.module.ts", { "file": "files/app.module-components.txt" })
--

Let us set up the routing such that when we visit the root url we see the `HomeComponent` and when we visit `/data` url we see the `DataComponent`. We had opted for routing while creating the application, so we have the routing module `app-routing.module.ts` setup for us. In this file, we have the empty routes array where we set up our routes:
[step]
--
changeFile("devon4ng-mat-layout/src/app/app-routing.module.ts", { "file": "files/app-routing.module.txt" })
--

We need to provide a hook where the components will be loaded when their respective URLs are loaded. We do that by using the `router-outlet` directive in the `app.component.html`:
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.component.html", { "file": "files/app.component-routing.txt" })
--

Let us finally create the sidenav. To implement the sidenav we need to use 3 Angular Material components: `mat-sidenav-container`, `mat-sidenav` and `mat-sidenav-content`. The `mat-sidenav-container`, as the name suggests, acts as a container for the `sidenav` and the associated content. So it is the parent element, and `mat-sidenav` and `mat-sidenav-content` are the children sibling elements. `mat-sidenav` represents the sidenav. We can put any content we want, though it is usually used to conatain a list of navigational links. The `mat-sidenav-content` element is for conataining our main page content. Since we need the `sidenav` application-wide, we will put it in the `app.component.html`
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.component.html", { "file": "files/app.component-sidenav.txt" })
changeFile("devon4ng-mat-layout/src/app/app.component.scss", { "file": "files/app.component-sidenav.scss.txt" })
--

The sidenav’s width will be corrected when we add the navigational links to it. That is the only thing remaining to be done. Lets implement it now:
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.component.html", { "file": "files/app.component-navlinks.txt" })
changeFile("devon4ng-mat-layout/src/app/app.component.scss", { "file": "files/app.component-navlinks.scss.txt" })
--