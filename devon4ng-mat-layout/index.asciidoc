= devon4ng Angular Material layout
====
The purpose of this tutorial is to get a basic understanding of creating layouts using Angular Material in a devon4ng application. We will create an application with a header containing some menu links and a sidenav with some navigation links.
====

[step]
--
restoreDevonfwIde(["java","mvn", "npm", "ng"])
--

Before creating a devon4ng application, you first have to install the devonfw ide. You will find more information about devonfw on https://devonfw.com/website/pages/welcome/welcome.html.
Once you have setup devonfw ide, you are ready to create your first devon4ng project.
[step]
--
createDevon4ngProject("devon4ng-mat-layout", "", ["--style=scss", "--routing=true"])
runClientNg("devon4ng-mat-layout", { "startupTime": 200, "port": 4200, "path": "" })
--

Next we will add Angular Material to our application.
[step]
--
npmInstall("devon4ng-mat-layout", {"name": "@angular/material @angular/cdk @angular/animations", "args": ["--save"]})
--

Once the dependencies are installed, we need to import the BrowserAnimationsModule in our AppModule for animations support.
Also, Angular Material provides a host of components for designing our application. All the components are well structured into NgModules. For each component from the Angular Material library that we want to use, we have to import the respective NgModule.
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.module.ts", { "file": "files/app.module.txt" })
--

To use Material Design Icons along with the mat-icon component, we will load the Material Icons library in our src/index.html file by adding this line: `<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">`
[step]
--
changeFile("devon4ng-mat-layout/src/index.html", { "file": "files/index.txt" })
--

Now that we have all the Angular Material related dependencies set up in our project, we can start coding. Letâ€™s begin by adding a suitable `margin` and `font` to the body element of our single page application. We will add it in the `src/styles.scss` file to apply it globally:
[step]
--
changeFile("devon4ng-mat-layout/src/styles.scss", { "file": "files/styles.txt" })
--

We will clear the `app.component.html` file and setup a header with a menu button and some navigational links. We will use `mat-toolbar`, `mat-button`, `mat-menu`, `mat-icon` and `mat-icon-button` for this:
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.component.html", { "file": "files/app.component.txt" })
--

We want to keep the sidenav toggling menu button on the left and move the rest to the right to make it look better. To do this lets add the following style to the `menu` class in `app.component.scss`:
[step]
--
changeFile("devon4ng-mat-layout/src/app/app.component.scss", { "file": "files/app.component.scss.txt" })
--

Next, we will create a sidenav. But before that lets create a couple of components to navgate between, the links of which we will add to the sidenav. You can use the `ng generate component` (or `ng g c` command for short) to create Home and Data components. But here, we will create them manually. We nest them in the pages sub-directory since they represent our pages.
[step]
--
createFile("devon4ng-mat-layout/src/app/pages/home/home.component.html", "files/home.component.txt")
createFile("devon4ng-mat-layout/src/app/pages/home/home.component.scss", "files/home.component.scss.txt")
createFile("devon4ng-mat-layout/src/app/pages/home/home.component.ts", "files/home.component.ts.txt")
createFile("devon4ng-mat-layout/src/app/pages/data/data.component.html", "files/data.component.txt")
createFile("devon4ng-mat-layout/src/app/pages/data/data.component.scss", "files/home.component.scss.txt")
createFile("devon4ng-mat-layout/src/app/pages/data/data.component.ts", "files/data.component.ts.txt")
--