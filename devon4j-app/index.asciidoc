= Generate your Java application with devon4j

[tags]
--
technology=Java;devonfw;Maven
difficulty=beginner
topic=project generation;setup;architecture;first application
asset=devon4j;My Thay Star
--

====
devon4j is the Java stack of devonfw. It allows you to build business applications (backends) using Java technology in a highly efficient and standardized way based on established best-practices.

# Prerequisites
* User should have Java development experience

# Learning goals
* After completing this scenario, you will have learned how to generate Java application using devon4j.

More information about devon4j on https://devonfw.com/website/pages/docs/devon4j.asciidoc.html

====

[step]
--
restoreDevonfwIde (["java","mvn","vscode"])
--
====
### A devon4j Sample Application

Note: Startup script will take some time for set up. After that you can proceed further.

If you want to create devon4j application on your local machine there are two ways to do it:

* In eclipse as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-eclipse)

* Using command line as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-command-line)

Now, you will create sample devon4j application with name *sampleapp*. This step will guide you on how to do it.


[step]
--
createDevon4jProject("com.example.application.sampleapp")
--

Once sampleapp is created switch to next tab of IDE. In IDE explorer you can see folder structure like devonfw-> workspaces->main->sampleapp . 

Sampleapp contains 3 modules i.e api, core and server.

**api**: It contains API for sampleapp.The API contains the required artifacts to interact with your application via remote services. This can be REST service interfaces, transfer-objects with their interfaces and datatypes but also OpenAPI or gRPC contracts.

**core**: It is the core of the application.In this module you can write actual business logic with service implementation, as well as entire logic layer and dataaccess layer.

**batch**: Optional module for batch layer. In this example we have not created it. To add batch module while generating from commandline use -Dbatch=batch parameter. And to generate it from eclipse using maven archetype, enter batch variable value as batch in project creation page.

**server**: This module bundles the entire app (core with optional batch) typically as a bootified WAR file.

If you want to know more about modules and project structure refer [here](#https://github.com/devonfw/devon4j/blob/master/documentation/guide-structure.asciidoc#project-structure).
====


====
[step]
--
displayContent("devon4j multilayer architecture", [{ "image": "images/devon4j_proj_structure1.jpg" }])
--

As shown in above image, devon4j application follows [multilayered architecture](https://en.wikipedia.org/wiki/Multitier_architecture).

Each component is divided into following layers:

* [client layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-client-layer.asciidoc) for the front-end (GUI).

* [service layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-service-layer.asciidoc) for the services used to expose functionality of the back-end to the client or other consumers. For example, in sampleapp we generated com.example.application.sampleapp.<componentname>.service.impl will have all rest service implementation.

* [batch layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-batch-layer.asciidoc) for exposing functionality in batch-processes (e.g. mass imports).

* [logic layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-logic-layer.asciidoc) for the business logic. For example, in sampleapp we generated com.example.application.sampleapp.<componentname>.logic will contain business logic or usecase implementation.

* [data-access layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-dataaccess-layer.asciidoc) for the data access (esp. persistence).For example, in sampleapp we generated com.example.application.sampleapp.<componentname>.dataaccess will contain entity, repositories etc.
====


====
Now you have to build a devon4j sample application i.e. sampleapp.

[step]
--
buildJava("sampleapp", false)
--

Once build is successful you will get bootified-war generated in server module target folder. In sampleapp check for path sampleapp/server/sampleapp-server-bootified.war

====


====
## Conclusion

In this tutorial you have learnt how to create devon4j application using command line or via Eclipse. Next you can check for other tutorials such as:
 
 * devon4j- contract first code generation
 
 * devon4j-Kafka
 
 * devon4j-security
 
 * devon4j with Spring JPA
 
 * devon4j rest services
 
 ====
