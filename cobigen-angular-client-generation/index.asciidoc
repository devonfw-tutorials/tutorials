= CobiGen Angular client generation
====
With the CobiGen code generator you can easily generate components for your angular application.
The following tutorial provides an example for using the CobiGen cli.
You can find more information on https://github.com/devonfw/cobigen/wiki/howto_angular-client-generation
## Prerequisites
* devonfw Ide
* Install yarn globally
## Learning goals.
Here in this tutorial we will learn the following:
* Create an angular project
* Cobigen to generate the angular source code out of the java files
* Change the user interface in the angular project to show the new components
* Show the newly created components
====

[step]
--
restoreDevonfwIde(["java", "mvn", "node", "ng", "npm"])
--

For this tutorial an installation of the devonfw IDE is required, which was already set up for you. The next step is to install the CobiGen CLI.
[step]
--
installCobiGen()
--

CobiGen uses the backend classes for generating your code used in the angular application. So in the next steps you will create a java project, create a simple java class and run the backend server.
[step]
--
createDevon4jProject("cobigenangularexample")
--

====
[step]
== Build and Run Java Server
--
buildJava("cobigenangularexample")
runServerJava("cobigenangularexample/server",{ "startupTime": 180, "port": 8080, "path": "cobigenangularexample" })
--
Now the Java Server should be running.
====

CobiGen is integrated via plugin in the VS Code IDE. We will use it to generate code from one single java class based on existing templates.
[step]
--
createDevon4ngProject("cobigenexample", "")
buildNg("cobigenexample")
runClientNg("cobigenexample/angular", { "startupTime": 200, "port": 4200, "path": "" })
createFile("cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api/CustomerEntity.java", "files/CustomerEntity.java")
adaptTemplatesCobiGen()
cobiGenJava("cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api/CustomerEntity.java",[1,3,5,6,8])
--
The CobiGen code generator will generate some java classes for you. These contain code for basic CRUD operations, REST service handling and data access.

For example, the following files are generated by CobiGen when using the specified templates:

(1) CRUD logic: Generates the logic layer and implementations for some use cases.
- `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/logic/impl/CustomermanagementImpl.java`{{open}}
- `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/logic/impl/usecase/UcManageCustomerImpl.java`{{open}}
- `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/logic/impl/usecase/UcFindCustomerImpl.java`{{open}}
- `devonfw/workspaces/main/cobigenexample/api/src/main/java/com/example/application/cobigenexample/customermanagement/logic/api/Customermanagement.java`{{open}}

(3) CRUD REST services: Generates the service layer with CRUD operations for using in REST services.
- `devonfw/workspaces/main/cobigenexample/api/src/main/java/com/example/application/cobigenexample/customermanagement/service/api/rest/CustomermanagementRestService.java`{{open}}
- `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/service/impl/rest/CustomermanagementRestServiceImpl.java`{{open}}

(5) TO's: Generates the related Transfer Objects.
- `devonfw/workspaces/main/cobigenexample/api/src/main/java/com/example/application/cobigenexample/customermanagement/logic/api/to/CustomerEto.java`{{open}}
- `devonfw/workspaces/main/cobigenexample/api/src/main/java/com/example/application/cobigenexample/customermanagement/logic/api/to/CustomerSearchCriteriaTo.java`{{open}}

(6) Entity infrastructure: Creates the entity main interface and edits (by a merge) the current entity to extend the newly generated classes.
- `devonfw/workspaces/main/cobigenexample/api/src/main/java/com/example/application/cobigenexample/customermanagement/common/api/Customer.java`{{open}}
- `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api/CustomerEntity.java`{{open}} (changed)

(8) CRUD SpringData Repository: Generates the entity repository (that contains the CRUD operations) in the data access layer.
- `devonfw/workspaces/main/cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api/repo/CustomerRepository.java`{{open}}
====

Furthermore, we can change the CustomerEntity afterwards and update our source files simply by running cobigen again.
[step]
== Change Entity and run cobigen again
--
changeFile("cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api/CustomerEntity.java", { "file": "files/Placeholder.java", "placeholder": "private int age;" })
cobiGenJava("cobigenexample/core/src/main/java/com/example/application/cobigenexample/customermanagement/dataaccess/api/CustomerEntity.java",[1,3,5,6,8])
--