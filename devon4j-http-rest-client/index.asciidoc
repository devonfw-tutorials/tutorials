= Develop a devon4j CXF REST Client using Synchronous call

[tags]
--
technology=Java;HTTP;Spring Data;Spring JPA;Flyway;Apache CXF;JAX-RS
difficulty=intermediate
topic=Rest;Rest API;authentication;API;client
asset=devon4j;My Thai Star
--
====
REST (REpresentational State Transfer) is an inter-operable protocol for services that is more lightweight than SOAP. We give best practices that lead to simple, easy and pragmatic "HTTP APIs".

## Prerequisites
* User should have development experience in JAVA.
* Basic knowledge of REST.

## Learning Goal
Here in this tutorial you will learn the following things:
* JAX-RS standard for REST service implementation proposed by devonfw.
* How to create REST client with devon4j using Synchronous call.

Let's get started!!
====

[step]
--
restoreDevonfwIde(["java", "vscode"])
--

====
REST (REpresentational State Transfer) is an inter-operable protocol for services that is more lightweight than SOAP.

For implementing REST services we use the JAX-RS standard. As an implementation we recommend CXF. For JSON bindings we use Jackson while XML binding works out-of-the-box with JAXB. To implement a service you write an interface with JAX-RS annotations for the API and a regular implementation class annotated with @Named to make it a spring-bean.

The REST service implementation is a regular CDI bean that can use dependency injection. The separation of the API as a Java interface allows to use it for service client calls.

**Why** **Should** **you** **prefer** **devon4j** **client** **over** **other** **clients?**

devon4j supports flexible configuration, adding headers for authentication, mapping of errors from server, logging success/errors with duration for performance analysis, support for synchronous and asynchronous invocations. Easy invocation of service inside a micro-service.
For more details on REST visit https://devonfw.com/website/pages/docs/devon4j.asciidoc_guides.html#guide-rest.asciidoc

For more details on devon4j Service Client https://devonfw.com/website/pages/docs/devon4j.asciidoc_guides.html#guide-service-client.asciidoc

## Create the devon4j REST SERVER
As explained in REST document, With JAX-RS it is important to make sure that each service method is annotated with the proper HTTP annotation(@GET, @POST, etc).
Let's create devon4j server.
[step]
== REST
--
createDevon4jProject("com.example.application.httprestserver")
--
In next step, you will add configuration to allow basic authentication.
====


Now, You have to modify BaseWebSecurityConfig file to allow application for basic authentication.
[step]
== Add configuration to allow basic authentication
--
changeFile("httprestserver/core/src/main/java/com/example/application/httprestserver/general/service/impl/config/BaseWebSecurityConfig.java", { "file": "files/BaseWebSecurityConfig.txt" })
--


Now, you will create VisitormanagementRestService to provide functionality using JAX-RS standard.
[step]
== Create service for REST server
--
createFile("httprestserver/api/src/main/java/com/example/application/httprestserver/visitormanagement/service/api/rest/VisitormanagementRestService.java", "files/VisitormanagementRestService.java")
--


====
Now, you will create VisitormanagementRestServiceImpl, the implementation class of VisitormanagementRestService using JAX-RS standard.
[step]
== Create implementation class for Service
--
createFile("httprestserver/core/src/main/java/com/example/application/httprestserver/visitormanagement/service/impl/rest/VisitormanagementRestServiceImpl.java", "files/VisitormanagementRestServiceImpl.java")
--
Here , you can see "VisitormanagementRestServiceImpl.java" is annotated with @Named to make it a spring-bean. To get return response to client "returnResponseToClient()" can be accessed via HTTP GET under the URL path "/visitormanagement/v1/clientrequest". It will return its result (String) as JSON (see @Produces in VisitormanagementRestService).
====


Now, you will configure port in application properties.
[step]
== Modify properties files
--
changeFile("httprestserver/core/src/main/resources/application.properties", { "file": "files/server_application.txt" })
changeFile("httprestserver/core/src/main/resources/config/application.properties", { "file": "files/server_config_application.txt" })
--



====
You have successfully built the REST-server. Now, you have to start the build and then, start the server as mentioned below.
[step]
== Build and Start devon4j REST Server
--
buildJava("httprestserver", false)
runServerJava("httprestserver/server", { "startupTime": 1000, "port": 8081, "path": "httprestserver" })
--
Once, Java server starts running. To test REST-server follow below steps:
* Click on "+" next to terminal tab
* Select "select port to view host"
* Enter the port number "8081" 
* In the url, append "/httprestserver/services/rest/visitormanagement/v1/clientrequest/"
* Enter username as "admin" and password as "admin"
* You will be able to see response "Welcome to REST API world"
In next step, You have to create devon4j service Client.
====


====
To create devon4j service Client. First, You need to create a sample devon4j project.

[step]
== Create devon4j REST Client
--
createDevon4jProject("com.example.application.httprestclient")
--
Then, You need to add required dependency to your application.

Since in this tutorial you will build client on Synchronous call so, you have to add dependency for synchronous consuming REST services via Apache CXF (Java8+)
You will add below dependency in core folder pom.xml

----
<dependency>
  <groupId>com.devonfw.java.starters</groupId>
  <artifactId>devon4j-starter-cxf-client-rest</artifactId>
</dependency>

----
====

Modify pom.xml as below:
[step]
== Modify POM file
--
changeFile("httprestclient/core/pom.xml", { "file": "files/dependency.txt", "placeholder": "<dependencies>" })
--

Now, You will create a Java interface VisitormanagementRestService to invoke inside client.
[step]
== Create service to invoke server
--
createFile("httprestclient/api/src/main/java/com/example/application/httprestclient/general/service/api/rest/VisitormanagementRestService.java", "files/VisitorManagementRestServiceClient.txt")
--


Now, you will create service for client i.e. TestRestService.java to provide functionality using JAX-RS standard.
[step]
== Create service for CXF REST Client
--
createFile("httprestclient/api/src/main/java/com/example/application/httprestclient/general/service/api/rest/TestRestService.java", "files/TestRestService.java")
--


====
Now, you will create TestRestServiceImpl, the implementation class of TestRestService using JAX-RS standard.

[step]
== Create implementation class for client's service
--
createFile("httprestclient/core/src/main/java/com/example/application/httprestclient/general/service/impl/rest/TestRestServiceImpl.java", "files/TestRestServiceImpl.java")
--

As you can see synchronous invocation of a service is very simple and type-safe. The actual call of showResponse will technically call the remote service(i.e. VisitormanagementRestService) over the wire ( via HTTP) including marshaling the arguments (converting String to JSON) and un-marshalling the result (e.g. converting the received JSON to String).
Here in TestRestServiceImpl, there is a method "callSynchronous" which will call the VisitormanagementRestService and return the object of VisitormanagementRestService to visitormanagementRestService.
With visitormanagementRestService, it is calling the method "returnResponseToClient()" of server.
The response from server will be stored in "resultFromAPICall" as the return type of result is String.
After getting response, you can handle the response further in your implementation. Here, you can see that response is getting handled in "showResponse" method.
====


====
An application needs to be configurable in order to allow internal setup but also to allow externalized configuration of a deployed package (e.g. integration into runtime environment). 
Now, You need to modify the content of existing properties files and add configuration for Server.
[step]
== Modify properties for server configuration
--
changeFile("httprestclient/core/src/main/resources/application.properties", { "file": "files/client_application.txt" })
changeFile("httprestclient/core/src/main/resources/config/application.properties", { "file": "files/client_config_application.txt" })
--
## Service Discovery
**service.client.default.url** :- It is used to set the default url of server and it is added for service discovery.

**service.client.app.httprestserver.url** :- This property provide base url of REST in your application. It follows format such as "service.client.app.«application».url". Here, «application» refers to the technical name of the application providing the service.

## Timeouts
**service.client.default.timeout.connection** :- It is used to set the default timeout for particular connection.

**service.client.default.timeout.response** :- It is used to set the default timeout for particular response.

## Headers
**service.client.app.httprestserver.auth** :- It is used for customization of Service Header. Here it is used for basic authentication.

## Authentication
**service.client.app.httprestserver.user.login** :- It is used to set username of server for authentication.

**service.client.app.httprestserver.user.password** :- It is used to set password.
====

====
Now, Let's build and start the service client application.
This might take some time for application to start.
[step]
== Build devon4j CXF REST Client
--
buildJava("httprestclient", false)
--

* Once, application builds successfully. Open new terminal by clicking "+" and wait for it to load.
* Now, Copy and execute below command to navigate into client server.
  `cd devonfw/workspaces/main/httprestclient/server`
* Now, Copy and execute below command to start the application.
  `devon mvn spring-boot:run`

To test Synchronous method, follow below steps.
* Click on "+" next to terminal tab
* Select "select port to view host"
* Enter the port number "8080" 
* In the url, append "/httprestclient/services/rest/testrest/v1/response/"
* Enter username as "admin" and password as "admin"
* You will be able to see response "Welcome to REST API world"
====

====
You have successfully created devon4j CXF REST Client.
For more details on devon4j follow https://devonfw.com/website/pages/docs/devon4j.asciidoc.html
====