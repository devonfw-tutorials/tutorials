= Develop a devon4j HTTP REST Client service using Synchronous call
====
REST (REpresentational State Transfer) is an inter-operable protocol for services that is more lightweight than SOAP. We give best practices that lead to simple, easy and pragmatic "HTTP APIs".

## Prerequisites
* User should have development experience in JAVA.
* Basic knowledge of REST.

## Learning Goal
Here in this tutorial you will learn the following things:
* JAX-RS standard for REST service implementation proposed by devonfw.
* How to create REST client with devon4j using Synchronous call.

Let's get started!!
====

[step]
--
restoreDevonfwIde(["java","mvn"], "2020.08.001")
--

====
* REST (REpresentational State Transfer) is an inter-operable protocol for services that is more lightweight than SOAP.
[step]
--
nextKatacodaStep("REST", [{ "file": "files/RestDescription.md" }])
--
For more details on REST visit https://devonfw.com/website/pages/docs/devon4j.asciidoc_guides.html#guide-rest.asciidoc

For more details on devon4j Service Client https://devonfw.com/website/pages/docs/devon4j.asciidoc_guides.html#guide-service-client.asciidoc
====

====
As explained in REST document, With JAX-RS it is important to make sure that each service method is annotated with the proper HTTP method (@GET,@POST,etc.).

Let's create devon4j server.
[step]
== Create the devon4j-HTTP-REST-SERVER
--
createDevon4jProject("HttpRestAPIdevon4j")
buildJava("HttpRestAPIdevon4j", true)
createFile("HttpRestAPIdevon4j/core/src/main/resources/db/migration/1.0/V0005__Create_Visitor.sql", "files/V0005__Create_Visitor.sql")
createFile("HttpRestAPIdevon4j/core/src/main/resources/db/migration/1.0/V0006__Master_data.sql", "files/V0006__Master_data.sql")
createFolder("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api")
createFile("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api/VisitorEntity.java", "files/VisitorEntity.java")
cobiGenJava("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api/VisitorEntity.java",[1,3,5,6,8])
changeFile("HttpRestAPIdevon4j/api/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/service/api/rest/VisitormanagementRestService.java", { "file": "files/VisitormanagementRestService.java" })
changeFile("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/service/impl/rest/VisitormanagementRestServiceImpl.java", { "file": "files/VisitormanagementRestServiceImpl.java" })
changeFile("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/general/service/impl/config/BaseWebSecurityConfig.java", { "file": "files/BaseWebSecurityConfig.java" })
runServerJava("devonfw/workspaces\main\restapi\server", { "startupTime": 40, "port": 8080, "path": "HttpRestAPIdevon4j" })
--
* In above example we have created VisitormanagementRestService and it's implementation i.e. VisitormanagementRestServiceImpl using JAX-RS standard.
* Here, "VisitormanagementRestServiceImpl.java" is annotated with @Named to make it a spring-bean.
* To get return response to client "returnResponseToClient()" can be accessed via HTTP GET under the URL path "/visitormanagement/v1/clientrequest". It will return its result (String) as JSON (see @Produces in VisitormanagementRestService). 

Now, Java server should be running.
Now, You have to create devon4j service Client.
====

====
* To create devon4j service Client. First You need to create a sample devon4j project and build the project.
[step]
== Create devon4j service Client
--
createDevon4jProject("HttpRestClientdevon4j")
buildJava("HttpRestClientdevon4j", true)
--

Then, You need to add required dependency to your application. 
====


[step]
--
nextKatacodaStep("  ", [{ "file": "files/dependency.md" }])
--

====
You already have a Java interface VisitormanagementRestService to invoke.
You have to create rest client (i.e. Devon4jRestClient.java) and it's implementation class.
[step]
== Create devon4j rest client
--
createFile("HttpRestClientdevon4j/api/src/main/java/com/devonfw/httpclient/httpRestClientdevon4j/Devon4jRestClient", "files/Devon4jRestClient.java")
createFile("HttpRestClientdevon4j/core/src/main/java/com/devonfw/httpclient/httpRestClientdevon4j/Devon4jRestClientImpl", "files/Devon4jRestClientImpl.java")
nextKatacodaStep(" ", [{ "file": "files/explainSynchronousCall.md" }])
--
After getting response, you can handle the response in your implementation. Here you can see that response is getting handled in "showResponse" method.
====


====
## Configuration 
An application needs to be configurable in order to allow internal setup but also to allow externalized configuration of a deployed package (e.g. integration into runtime environment). 
[step]
--
changeFile("HttpRestClientdevon4j/core/src/main/resources/config/application.properties", { "file": "files/config-application.properties" })
nextKatacodaStep("Properties Configuration", [{ "file": "files/configurationProperties.md" }])
--

Now, after configuration you have to start the client application.
====

====
This might take some time for application to start.
[step]
--
runServerJava("devonfw/workspaces\main\HttpRestClientdevon4j\server", { "startupTime": 40, "port": 8081, "path": "HttpRestClientdevon4j" })
--
Once the REST-server started running,
Open http://localhost:8080/client/services/rest/testrest/v1/response, Enter username as "admin" and password as "admin"
====