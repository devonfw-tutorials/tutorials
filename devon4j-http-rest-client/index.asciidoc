= Develop a devon4j HTTP REST Client service using Synchronous call
== Different, new and easiest way to learn various methods and protocols of REST Client proposed by devonfw.
====
REST (REpresentational State Transfer) is an inter-operable protocol for services that is more lightweight than SOAP. We give best practices that lead to simple, easy and pragmatic "HTTP APIs".

## Prerequisites
* devonfw IDE
* User should have development experience in JAVA.
* Basic knowledge of REST-api and REST-client services.

## Learning Goal
Here in this tutorial you will learn the following things:
* How to create REST client with devon4j using Synchronous call.
* JAX-RS standard for REST service implementation proposed by devonfw
* Recommendations for REST requests and responses: a deviation from common REST pattern	

Let's get started
====

[step]
--
restoreDevonfwIde(["java","mvn"], "2020.08.001")
--

[step]
# Create a devon4j REST Client
--
createDevon4jProject("HttpRestAPIdevon4j")
buildJava("HttpRestAPIdevon4j", true)
createFile("HttpRestAPIdevon4j/core/src/main/resources/db/migration/1.0/V0005__Create_Visitor.sql", "files/V0005__Create_Visitor.sql")
createFile("HttpRestAPIdevon4j/core/src/main/resources/db/migration/1.0/V0006__Master_data.sql", "files/V0006__Master_data.sql")
createFolder("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api")
createFile("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api/VisitorEntity.java", "files/VisitorEntity.java")
cobiGenJava("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api/VisitorEntity.java",[1,3,5,6,8])
runServerJava("devonfw/workspaces\main\restapi\server", { "startupTime": 40, "port": 8080, "path": "HttpRestAPIdevon4j" })
--