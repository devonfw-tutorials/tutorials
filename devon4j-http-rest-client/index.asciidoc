= Develop a devon4j HTTP REST Client service using Synchronous call
====
REST (REpresentational State Transfer) is an inter-operable protocol for services that is more lightweight than SOAP. We give best practices that lead to simple, easy and pragmatic "HTTP APIs".

## Prerequisites
* devonfw IDE
* User should have development experience in JAVA.
* Basic knowledge of REST-api and REST-client services.

## Learning Goal
Here in this tutorial you will learn the following things:
* How to create REST client with devon4j using Synchronous call.
* JAX-RS standard for REST service implementation proposed by devonfw
* Recommendations for REST requests and responses: a deviation from common REST pattern	

Let's get started!!
====

[step]
--
restoreDevonfwIde(["java","mvn"], "2020.08.001")
--

[step]
--
nextKatacodaStep("REST", [{ "file": "files/RestDescription.md" }])
--

====
For implementing REST services we use the JAX-RS standard. As an implementation we recommend CXF. For JSON bindings we use Jackson while XML binding works out-of-the-box with JAXB. To implement a service you write an interface with JAX-RS annotations for the API and a regular implementation class annotated with @Named to make it a spring-bean. 
The REST service implementation is a regular CDI bean that can use dependency injection. The separation of the API as a Java interface allows to use it for service client calls.

[step]
== Initiate the devon4j-HTTP-REST-API
--
createDevon4jProject("HttpRestAPIdevon4j")
buildJava("HttpRestAPIdevon4j", true)
createFile("HttpRestAPIdevon4j/core/src/main/resources/db/migration/1.0/V0005__Create_Visitor.sql", "files/V0005__Create_Visitor.sql")
createFile("HttpRestAPIdevon4j/core/src/main/resources/db/migration/1.0/V0006__Master_data.sql", "files/V0006__Master_data.sql")
createFolder("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api")
createFile("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api/VisitorEntity.java", "files/VisitorEntity.java")
cobiGenJava("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/dataaccess/api/VisitorEntity.java",[1,3,5,6,8])
changeFile("HttpRestAPIdevon4j/api/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/service/api/rest/VisitormanagementRestService.java", { "file": "files/VisitormanagementRestService.java" })
changeFile("HttpRestAPIdevon4j/core/src/main/java/com/devonfw/httprestapi/restapi/visitormanagement/service/impl/rest/VisitormanagementRestServiceImpl.java", { "file": "files/VisitormanagementRestServiceImpl.java" })
runServerJava("devonfw/workspaces\main\restapi\server", { "startupTime": 40, "port": 8080, "path": "HttpRestAPIdevon4j" })
--

This will take some time to initialize the REST-API.

Once the REST-API started running, Check the service in postman.

You have to create devon4j service Client.
====

====

Why Should you prefer devon4j client over other clients??
Various solutions already exist for calling services such as RestTemplate from spring or the JAX-RS client API. Further each and every service framework offers its own API as well. These solutions might be suitable for very small and simple projects (with one or two such invocations). However, with the trend of micro-services the invocation of a service becomes a very common use-case that occurs all over the place. You typically need a solution that is very easy to use but supports flexible configuration, adding headers for authentication, mapping of errors from server, logging success/errors with duration for performance analysis, support for synchronous and asynchronous invocations, etc. This is exactly what this devon4j service-client solution brings for you.

* To create devon4j service Client. First You need to create a sample devon4j project and build it.
[step]
== Create devon4j service Client
--
createDevon4jProject("HttpRestClientdevon4j")
buildJava("HttpRestClientdevon4j", true)
--

Then, You need to add (at least one of) these dependencies to your application. 
====


[step]
--
nextKatacodaStep("  ", [{ "file": "files/dependency.md" }])
--



You have to create rest client (i.e. Devon4jRestClient.java) and it's implementation class.
[step]
== Create devon4j rest client
--
createFile("HttpRestClientdevon4j/api/src/main/java/com/devonfw/httpclient/httpRestClientdevon4j/Devon4jRestClient", "files/Devon4jRestClient.java")
createFile("HttpRestClientdevon4j/core/src/main/java/com/devonfw/httpclient/httpRestClientdevon4j/Devon4jRestClientImpl", "files/Devon4jRestClientImpl.java")
--


====
## Configuration 
The server for client has already started. To modify properties, add configuration for rest server url in it.
[step]
--
changeFile("HttpRestClientdevon4j/core/src/main/resources/config/application.properties", { "file": "files/config-application.properties" })
changeFile("HttpRestClientdevon4j/core/src/main/resources/application.properties", { "file": "files/application.properties" })
--

You have to start the application.
This might take same time for application to start.
====


[step]
--
runServerJava("devonfw/workspaces\main\HttpRestClientdevon4j\server", { "startupTime": 40, "port": 8081, "path": "HttpRestClientdevon4j" })
--


====
You have successfully created the Client application with devon4j. For more details on RESTful webservices follow https://devonfw.com/website/pages/docs/devon4j.asciidoc_guides.html#guide-rest.asciidoc
====