= Create your own tutorial
==== 
In this scenario, you will learn how to create your own tutorial using the tutorial compiler.

## Prerequisites
* GitHub account

## Learning goals
* You will learn how to set up the environment and get an introduction to the syntax for writing your own tutorial.

You can find the documentation of the tutorial compiler here:

https://github.com/devonfw-forge/tutorial-compiler/wiki
====

====
# Setup your workspace
Let's start!

First of all, go to the tutorials repository on GitHub:

https://github.com/devonfw-tutorials/tutorials

Fork the repository by clicking on the 'Fork' button.
This will create a copy of the repository in your own GitHub account. You will find it in 'Your repositories'.

[step]
--
displayContent("Fork the tutorials repository", [{"image": "images/fork.jpg"}, {"content": "\nOpen the forked repository in your GitHub account and copy the repository URL as shown in image below.\n"}, {"image": "images/clone_code.jpg"}])
--
====


Paste the URL to the 'git clone' command to clone the repostitory. For this tutorial we will use the original tutorials repository of the 'devonfw-tutorials' GitHub account to show the workflow of creating the tutorial.

When you run the command on your machine, you will of course need to customize the URL and add your personal GitHub name. So the command will be `git clone https://github.com/YourName/tutorials.git`.
[step]
== Clone the repository
--
cloneRepository("", "https://github.com/devonfw-tutorials/tutorials.git")
--

====
[step]
--
displayContent("Create a new branch", [{ "file": "files/createNewBranch.md" }])
--
Now you can start to create the tutorial. This will be shown in the next steps.
====

# Create the tutorial

Each tutorial is located in its own directory and consists of an asciidoc file, in which the tutorial is specified. The file is always named 'index.asciidoc'.

So create a new folder in inside the tutorials directory and the file for the tutorial.
[step]
--
createFile("tutorials/myTutorial/index.asciidoc")
--

[step]
--
displayContent("Create a pull request", [{ "file": "files/createPullRequest1.md" }, {"image": "images/pull_request.jpg"}, {"content": "\nYou might have to click on 'compare across forks'.\n"}, {"image": "images/compare.jpg"}, { "file": "files/createPullRequest2.md" }])
--

The syntax in which the tutorial is written can be found at https://github.com/devonfw-tutorials/tutorials/wiki/Development.

At first we will add a title to the first line of the file.
[step]
== Add the title
--
changeFile("tutorials/myTutorial/index.asciidoc", {"content": "= Title of my new tutorial"})
--

The next step is to add some description lines below the title. The description has to be surrounded by `====`.
[step]
== Add the description
--
changeFile("tutorials/myTutorial/index.asciidoc", {"file": "files/description.txt", "placeholder": "= Title of my new tutorial" })
--

====
Last but not least add a step. 

Each step consists of

* an explanation
* a function to execute (You can find a list with the currently available functions on https://github.com/devonfw-tutorials/tutorial-compiler/wiki/Functions)
* and an optional explanation of the results of the step.

In this tutorial we will add a simple step which creates a new file.
[step]
== Add a step
--
changeFile("tutorials/myTutorial/index.asciidoc", {"file": "files/step.txt" })
--
This is the syntax without additional text after the step. There is an alternative syntax to display a text after the step (e.g. for describing the results of a step). This will be shown in the next step.
====

[step]
--
displayContent("Alternative syntax", [{ "file": "files/alternativeSyntax.md" }])
--

[step]
--
displayContent("Push tutorial", [{ "file": "files/pushTutorial.md" }])
--

[step]
--
displayContent("Local testing", [{ "file": "files/localTesting.md" }])
--
