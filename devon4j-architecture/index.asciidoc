= devon4j architecture in practice
====
## Prerequisites

Java programming knowledge

## Learning goals

This tutorial aims to explain concepts and principles of devon4j architecture with help of an sample application named JumpTheQueue. Below are the steps we will go through to understand it clearly.

* Clone JumpTheQueue repository
* Understand devon4j application structure 
* Understand Key and architectural principles followed by devon4j
* Understand devon4j application architecture

By end of this tutorial you will have detailed understanding of principles followed by devon4j application as well as its structure and architecture. 

====
### setup environment
We will start by setting up development environment.

[step]
--
restoreDevonfwIde(["java", "vscode"])
--
====
### Clone jump the queue repository

First, clone the Jump-The-Queue Repository.Jump the queue is a sample devonfw application.
[step]
--
cloneRepository("", "https://github.com/devonfw/jump-the-queue.git")
--
Once project is cloned switch to next tab of IDE. In IDE explorer you will be able to see folder structure like devonfw-> workspaces->main->jump-the-queue-> java->jtqj 
====
====
### devon4j application structure
[step]
--
nextKatacodaStep("devon4j application architecture", [{ "image": "images/jtqj_app_structure.jpg" }])
--

As shown above, jump-the-queue contains 3 modules i.e api, core and server.

**api**: It contains API for sampleapp.The API contains the required artifacts to interact with your application via remote services. This can be REST service interfaces, transfer-objects with their interfaces and datatypes but also OpenAPI or gRPC contracts.

**core**: It is the core of the application.In this module you can write actual business logic with service implementation, as well as entire logic layer and dataaccess layer.

**batch**: optional module for batch layer. In this example we have not created it.

**server**: This module bundles the entire app (core with optional batch) typically as a bootified WAR file.

If you want to know more about modules and project structure refer [here](https://github.com/devonfw/devon4j/blob/master/documentation/guide-structure.asciidoc#project-structure).

devon4j application follows [multilayered architecture](https://en.wikipedia.org/wiki/Multitier_architecture). We will understand more about it in next step.

====
====
### devon4j layers explained

[step]
--
nextKatacodaStep("devon4j application layers", [{ "image": "images/jtqj_detailed_app_structure.jpg" }])
--

Above image display detailed structure of devon4j application. As shown above jump-the-queue application contains different components like queuemanagement, visitormanagement etc

Each component is divided into following layers:
* [client layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-client-layer.asciidoc) for the front-end (GUI).

* [service layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-service-layer.asciidoc) for the services used to expose functionality of the back-end to the client or other consumers. 
For example, in jtqj-api->queuemangement->service->api-> rest contains interfaces for rest services. In core module jtqj-core->queuemanagement->service->impl-> rest you will be able to see implementation of service.

* [batch layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-batch-layer.asciidoc) for exposing functionality in batch-processes (e.g. mass imports).

* [logic layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-logic-layer.asciidoc) for the business logic.
For example, in jtqj-api->queuemangement->logic->api contains ETO(Entity Transfer Object) , CTO(Composite Transfer object), some logic interfaces. In core module jtqj-core->queuemanagement->logic->impl you will be able to see usecase implementation.

* [data-access layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-dataaccess-layer.asciidoc) for the data access (esp. persistence).
For example, in jtqj-api->queuemangement->dataaccess->core contains entities, spring data repositories etc

====

[step]
--
nextKatacodaStep("Understand devon4j application architecture", [{ "file": "devon4j-app-arch.md" }])
--

====
### Conclusion

To summarize, in this tutorial we learned about devon4j architecture and key principle it follows. with help of example we also learned about devon4j different modules such as api, core ,server and its multilayered architecture.

Next you can visit following tutorials to know more about devon4j:
 * Java backend code generation using CobiGen (Code Generator)
 * devon4j- contract first code generation
 * devon4j-Kafka
 * devon4j-security
 * devon4j with Spring JPA
 * devon4j rest services
 ====
 
